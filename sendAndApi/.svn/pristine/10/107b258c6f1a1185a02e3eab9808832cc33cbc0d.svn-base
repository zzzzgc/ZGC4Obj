package com.xinxing.o.boss.business.provider.other.josy.api;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.xinxing.boss.business.api.domain.SendOrderInfo;
import com.xinxing.boss.business.api.domain.SendOrderResult;
import com.xinxing.boss.business.api.domain.SendOrderStatus;
import com.xinxing.o.boss.business.provider.api.supplier.api.SendApi;
import com.xinxing.o.boss.business.provider.other.josy.util.JOSYUtils;
import com.xinxing.o.boss.business.provider.other.kdou.api.KdouSendApiImpl;
import com.xinxing.o.boss.common.http.HttpUtils;
import com.xinxing.o.boss.common.phone.PhoneUtils;
import com.xinxing.o.boss.common.resource.Constants;
import com.xinxing.o.boss.common.util.FlowQueryLogUtils;
import com.xinxing.o.boss.common.util.FlowSendLogUtils;

public class JOSYSendApiImpl implements SendApi {
	private static Logger log = Logger.getLogger(JOSYSendApiImpl.class);
	
	/*public static void main(String[] args) {
		SendOrderInfo sendOrderInfo = PhoneUtils.createSendOrderInfo("testId", "0,50", "providerId", "1500290852766");
		System.out.println(sendOrderInfo.toString());
		JOSYSendApiImpl josy = new JOSYSendApiImpl();
		SendOrderResult result = josy.send(sendOrderInfo);
		System.out.println(result);
	} */
	/*返回字段(当result为true时,会sysno返回系统订单号)
	 * {“result”:”true”,”message”:”提交成功”,”sysno”:”123456789”}  */
	@Override
	public SendOrderResult send(SendOrderInfo sendOrderInfo) {
		SendOrderResult result = null;
		String orderid = sendOrderInfo.getOrderId();
		String sendUrl = Constants.getString("josy_sendUrl");
		try {
			String sendStr = JOSYUtils.getSendStr(sendOrderInfo);
			//获取订单发送(传递/返回)日志
			FlowSendLogUtils.sendReqLog(log, orderid, sendStr);
			String getResp = HttpUtils.sendPostByNameValue(sendUrl,sendStr);
			FlowSendLogUtils.sendResLog(log, orderid, getResp);
			System.out.println(getResp);
			
			if (StringUtils.isNotBlank(getResp)) {
				JSONObject obj = JSON.parseObject(getResp);
				String msg = obj.getString("message");
				String provider_result = obj.getString("result");
				String theirOrderId = obj.getString("sysno");
				if ("true".equals(provider_result)) {
					result = new SendOrderResult(SendOrderStatus.WAIT_CALLBACK.status,null,theirOrderId);
				}else if("false".equals(provider_result)){
					if (msg.contains("您的账户余额不足")) { 	//余额不足转人工
						result = new SendOrderResult(SendOrderStatus.NEED_MANUAL.status,"您的账户余额不足",theirOrderId);
					}else {
						result = new SendOrderResult(SendOrderStatus.FAILED.status,msg,theirOrderId);
					}
				}
			}else {
				result = new SendOrderResult(SendOrderStatus.NEED_MANUAL.status,"充值响应结果为空",orderid);
			}
		} catch (Exception e) {
			result = new SendOrderResult(SendOrderStatus.NEED_MANUAL.status,"系统异常,请找技术人员",orderid);
			FlowSendLogUtils.sendExceptionLog(log, sendOrderInfo.getOrderId(), e);
		}
		return result;
	}

	/*返回字段json	 result	   true 或 false 
	 data说明	     tradeno   渠道订单号
				 state	   0：充值中，1：充值成功，2:充值失败
				 statdesc  充值状态描述	
	 {"result":"true","message":"查询成功","data":[{"tradeno":"170401B0B153632","state":1,"statdesc":"充值成功"}]}
	 {"result":"false","message":"\u53c2\u6570\u9519\u8bef","data":[]}   */
	@Override
	public Map<String, SendOrderResult> querys(List<SendOrderInfo> sendOrderInfos) {
		Map<String,SendOrderResult> resultMap = new HashMap<>();
		SendOrderResult result = null;
		for (SendOrderInfo sendOrderInfo : sendOrderInfos) {
			String orderId = sendOrderInfo.getOrderId();
			String theirOrderId = sendOrderInfo.getSupplierOrderId();
			try {
				String queryStr = JOSYUtils.getQueryStr(sendOrderInfo);
				String queryUrl = Constants.getString("josy_queryUrl").trim();
				//获取订单查询(传递/返回)日志
				FlowQueryLogUtils.queryReqLog(log, orderId, queryUrl+","+queryStr);
				String getResp = HttpUtils.sendPostByNameValue(queryUrl,queryStr);
				FlowQueryLogUtils.queryResLog(log, orderId, getResp);
				
				if (StringUtils.isNotBlank(getResp)) {
					JSONObject obj = JSON.parseObject(getResp);
					String provider_result = obj.getString("result");
					String msg = obj.getString("message");
					if ("true".equals(provider_result)) {
						String state = obj.getJSONArray("data").getJSONObject(0).getString("state");
						switch (state) {
						case "0":   //充值中
							result = new SendOrderResult(SendOrderStatus.WAIT_CALLBACK.status,null,theirOrderId);
							break;
						case "1":   //充值成功
							result = new SendOrderResult(SendOrderStatus.SUCCESS.status,null,theirOrderId);
							break;
						case "2":   //充值失败
							result = new SendOrderResult(SendOrderStatus.FAILED.status,msg,theirOrderId);
							break;
						default:
							result = new SendOrderResult(SendOrderStatus.WAIT_CALLBACK.status,null,theirOrderId);
							break;
						}
					}else {
						if (msg.contains("您的账户余额不足")) { 	//余额不足转人工
							result = new SendOrderResult(SendOrderStatus.NEED_MANUAL.status,"您的账户余额不足",theirOrderId);
						}else {
							result = new SendOrderResult(SendOrderStatus.FAILED.status,msg,theirOrderId);
						}
					}
				}else {
					result = new SendOrderResult(SendOrderStatus.WAIT_CALLBACK.status,null,theirOrderId);
				}
			} catch (Exception e) {
				result= new SendOrderResult(SendOrderStatus.NEED_MANUAL.status, "系统异常,请找技术人员",theirOrderId);
				FlowQueryLogUtils.queryExceptionLog(log,orderId, e);
			}
			
			resultMap.put(orderId,result);
		}
		return resultMap;
	}

	@Override
	public SendOrderResult query(SendOrderInfo sendOrderInfo) {
		List<SendOrderInfo> queryList = new ArrayList<>();
		queryList.add(sendOrderInfo);
		Map<String, SendOrderResult> resultMap = querys(queryList);
		if (resultMap != null) {
			return resultMap.get(sendOrderInfo.getOrderId());
		}
		return null;
	}

}

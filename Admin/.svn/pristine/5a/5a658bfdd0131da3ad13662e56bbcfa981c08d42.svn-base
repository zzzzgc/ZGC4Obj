package xinxing.boss.admin.boss.other.util;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import xinxing.boss.admin.boss.customer.cmd.CustomerMoneyRecordCmd;
import xinxing.boss.admin.boss.customer.domain.CustomerInfo;
import xinxing.boss.admin.boss.customer.domain.CustomerMoneyRecord;
import xinxing.boss.admin.boss.customer.service.CustomerInfoService;
import xinxing.boss.admin.boss.customer.service.CustomerMoneyRecordService;
import xinxing.boss.admin.boss.order.cmd.OrderInfoCmd;
import xinxing.boss.admin.boss.order.domain.OrderInfo;
import xinxing.boss.admin.boss.order.service.OrderInfoService;
import xinxing.boss.admin.boss.other.cmd.BossCommonCmd;
import xinxing.boss.admin.boss.provider.service.ProductCategoryInfoService;
import xinxing.boss.admin.common.csv.CSVUtils;
import xinxing.boss.admin.common.persistence.PropertyFilter;
import xinxing.boss.admin.common.schedule.impl.UploadCSV4MonthScheduleServiceImpl;
import xinxing.boss.admin.common.utils.base.BaseUtil;
import xinxing.boss.admin.common.utils.parameter.ParameterListener;
import xinxing.boss.admin.common.utils.time.DateUtils;

public class BossCommonUtil {
	private static Logger log = LoggerFactory.getLogger(BossCommonCmd.class);

	public static Map<String, Object> getQueryMapByTableName(HttpServletRequest request, Integer pageNumber, Integer pageSize, String tableName,
			OrderInfoService orderInfoService,String orderBy,Boolean isDesc) throws Exception {
		if (pageNumber == null) {
			pageNumber = 1;
		}
		if (pageSize == null) {
			pageSize = 20;
		}
		List<PropertyFilter> filters = PropertyFilter.buildFromHttpRequest(request);
		StringBuffer sql = new StringBuffer(200);
		sql.append("select * from " + tableName + " ");
		log.info(BaseUtil.getSqlConditionByFilters(filters, log));
		sql.append(BaseUtil.getSqlConditionByFilters(filters, log)).append(" order by "+orderBy+" "+(isDesc?"desc":"asc")+" ")
				.append(" limit " + (pageNumber - 1) * pageSize + "," + pageNumber * pageSize);
		LoggerFactory.getLogger("countSql:").info(sql.toString());
		List<Map<String, Object>> query = orderInfoService.query(sql.toString());
		Map<String, Object> map = new HashMap<String, Object>();
		List<Map<String, Object>> query2 = orderInfoService.query("select count(id) as total from " + tableName + " "
				+ BaseUtil.getSqlConditionByFilters(filters, log));
		map.put("rows", query);
		map.put("total", (query2.get(0).get("total")));
		return map;
	}

	public static void uploadCsvForMonth(Date date, int number, Date start, Date end, CustomerInfoService customerInfoService,
			OrderInfoService orderInfoService, CustomerMoneyRecordService customerMoneyRecordService,
			ProductCategoryInfoService productCategoryInfoService) {
		for (int i = 0; i < 2; i++) {
			List<String[]> fieldsList = new ArrayList<>();
			Map<Integer, String> cusIdPathMap = new HashMap<>();
			Map<Integer, StringBuilder> cusIdSbMap = new HashMap<>();

			Class<?> clazz = null;
			String parthArg = BaseUtil.getWEBINFUrl() + "/" + "uploadCSV" + "/";// linux
			File file = new File(parthArg);
			if (!file.exists() && !file.isDirectory()) {
				file.mkdirs();
			}
			String[] hearders = null;
			String[] fields = null;
			String[] inside_hearders = null;
			String[] inside_fields = null;
			Date cusStartDate = start;
			Date cusEndDate = end;
			if (i == 0) {// CustomerMoneyRecord
				clazz = CustomerMoneyRecord.class;
				hearders = CustomerMoneyRecordCmd.hearders;
				fields = CustomerMoneyRecordCmd.fields;
				inside_hearders = CustomerMoneyRecordCmd.inside_hearders;
				inside_fields = CustomerMoneyRecordCmd.inside_fields;
			} else if (i == 1) {// OrderInfo
				clazz = OrderInfo.class;
				hearders = OrderInfoCmd.hearders;
				fields = OrderInfoCmd.fields;
				inside_hearders = OrderInfoCmd.inside_hearders;
				inside_fields = OrderInfoCmd.inside_fields;
			}
			String fileName = null;

			fieldsList.add(fields);
			fieldsList.add(inside_fields);
			// ----------------------
			Map<Integer, CustomerInfo> customerInfoMap = ParameterListener.customerInfoMap;
			customerInfoMap.put(0, null);
			for (Entry<Integer, CustomerInfo> entry : customerInfoMap.entrySet()) {
				/*fileName = entry.getKey() + "_" + clazz.getSimpleName() + "_" + DateUtils.getYear(date) + "-" + DateUtils.getMonth(date) + "-"
						+ number + "-week";*/
				fileName = entry.getKey() + "_" + clazz.getSimpleName() + "_" + DateUtils.getYear(date) + "-" + DateUtils.getMonth(date);
				String path = parthArg + fileName + ".csv";
				file = new File(path);
				if (file.exists()) {
					file.delete();
				}
				cusIdPathMap.put(entry.getKey(), path);
				cusIdSbMap.put(entry.getKey(), new StringBuilder(50000));
				StringBuilder bw = new StringBuilder();
				for (String string : ((entry.getKey() == 0) ? inside_hearders : hearders)) {
					bw.append(string).append(",");
				}
				bw.append("\r");
				CSVUtils.appendCsv(path, bw.toString());
			}
			if (i == 0)
				UploadCSV4MonthScheduleServiceImpl.getCustomerMoneyRecordDataList(cusStartDate, cusEndDate, fieldsList, cusIdPathMap, cusIdSbMap,
						customerMoneyRecordService, customerInfoService);
			else if (i == 1) {
				UploadCSV4MonthScheduleServiceImpl.getOrderInfoDataList(cusStartDate, cusEndDate, fieldsList, cusIdPathMap, cusIdSbMap,
						orderInfoService, productCategoryInfoService);
			}

		}
	}
	
	public static Map<Date, String> getTimeUrlMap(String filePathHead, String filePathEnd, Date endTime, Date startTime) {
		Date startDay = startTime;
		Map<Date, String> timeMap = new HashMap<>();
		while (startDay.before(endTime)) {
			String fileName = filePathHead + DateUtils.formatDate(startDay) + filePathEnd;
			if (new File(fileName).isFile()) {
				timeMap.put(startDay, fileName);
			}
			startDay = DateUtils.addDays(startDay, 1);
		}
		return timeMap;
	}

}

package xinxing.boss.admin.boss.other.util;

import java.io.File;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import xinxing.boss.admin.boss.customer.cmd.CustomerMoneyRecordCmd;
import xinxing.boss.admin.boss.customer.domain.CustomerInfo;
import xinxing.boss.admin.boss.customer.domain.CustomerMoneyRecord;
import xinxing.boss.admin.boss.customer.service.CustomerInfoService;
import xinxing.boss.admin.boss.customer.service.CustomerMoneyRecordService;
import xinxing.boss.admin.boss.order.cmd.OrderInfoCmd;
import xinxing.boss.admin.boss.order.domain.OrderInfo;
import xinxing.boss.admin.boss.order.service.OrderInfoService;
import xinxing.boss.admin.boss.other.cmd.BossCommonCmd;
import xinxing.boss.admin.boss.other.service.TransferOrderService;
import xinxing.boss.admin.boss.provider.service.ProductCategoryInfoService;
import xinxing.boss.admin.common.csv.CSVUtils;
import xinxing.boss.admin.common.persistence.PropertyFilter;
import xinxing.boss.admin.common.persistence.PropertyFilter.MatchType;
import xinxing.boss.admin.common.schedule.impl.UploadCSV4MonthScheduleServiceImpl;
import xinxing.boss.admin.common.utils.base.BaseUtil;
import xinxing.boss.admin.common.utils.parameter.ParameterListener;
import xinxing.boss.admin.common.utils.time.DateUtils;

public class BossCommonUtil {
	private static Logger log = LoggerFactory.getLogger(BossCommonCmd.class);

	public static Map<String, Object> getQueryMapByTableName(HttpServletRequest request, Integer pageNumber, Integer pageSize, String tableName,
			OrderInfoService orderInfoService,String orderBy,Boolean isDesc) throws Exception {
		if (pageNumber == null) {
			pageNumber = 1;
		}
		if (pageSize == null) {
			pageSize = 20;
		}
		List<PropertyFilter> filters = PropertyFilter.buildFromHttpRequest(request);
		StringBuffer sql = new StringBuffer(200);
		sql.append("select * from " + tableName + " ");
		log.info(BaseUtil.getSqlConditionByFilters(filters, log));
		sql.append(BaseUtil.getSqlConditionByFilters(filters, log)).append(" order by "+orderBy+" "+(isDesc?"desc":"asc")+" ")
				.append(" limit " + (pageNumber - 1) * pageSize + "," + pageNumber * pageSize);
		LoggerFactory.getLogger("countSql:").info(sql.toString());
		List<Map<String, Object>> query = orderInfoService.query(sql.toString());
		Map<String, Object> map = new HashMap<String, Object>();
		List<Map<String, Object>> query2 = orderInfoService.query("select count(id) as total from " + tableName + " "
				+ BaseUtil.getSqlConditionByFilters(filters, log));
		map.put("rows", query);
		map.put("total", (query2.get(0).get("total")));
		return map;
	}

	public static void uploadCsvForMonth(Date date, int number, Date start, Date end, CustomerInfoService customerInfoService,
			OrderInfoService orderInfoService, CustomerMoneyRecordService customerMoneyRecordService,
			ProductCategoryInfoService productCategoryInfoService) {
		for (int i = 0; i < 2; i++) {
			List<String[]> fieldsList = new ArrayList<>();
			Map<Integer, String> cusIdPathMap = new HashMap<>();
			Map<Integer, StringBuilder> cusIdSbMap = new HashMap<>();

			Class<?> clazz = null;
			String parthArg = BaseUtil.getWEBINFUrl() + "/" + "uploadCSV" + "/";// linux
			File file = new File(parthArg);
			if (!file.exists() && !file.isDirectory()) {
				file.mkdirs();
			}
			String[] hearders = null;
			String[] fields = null;
			String[] inside_hearders = null;
			String[] inside_fields = null;
			Date cusStartDate = start;
			Date cusEndDate = end;
			if (i == 0) {// CustomerMoneyRecord
				clazz = CustomerMoneyRecord.class;
				hearders = CustomerMoneyRecordCmd.hearders;
				fields = CustomerMoneyRecordCmd.fields;
				inside_hearders = CustomerMoneyRecordCmd.inside_hearders;
				inside_fields = CustomerMoneyRecordCmd.inside_fields;
			} else if (i == 1) {// OrderInfo
				clazz = OrderInfo.class;
				hearders = OrderInfoCmd.hearders;
				fields = OrderInfoCmd.fields;
				inside_hearders = OrderInfoCmd.inside_hearders;
				inside_fields = OrderInfoCmd.inside_fields;
			}
			String fileName = null;

			fieldsList.add(fields);
			fieldsList.add(inside_fields);
			// ----------------------
			Map<Integer, CustomerInfo> customerInfoMap = ParameterListener.customerInfoMap;
			customerInfoMap.put(0, null);
			for (Entry<Integer, CustomerInfo> entry : customerInfoMap.entrySet()) {
				/*fileName = entry.getKey() + "_" + clazz.getSimpleName() + "_" + DateUtils.getYear(date) + "-" + DateUtils.getMonth(date) + "-"
						+ number + "-week";*/
				fileName = entry.getKey() + "_" + clazz.getSimpleName() + "_" + DateUtils.getYear(date) + "-" + DateUtils.getMonth(date);
				String path = parthArg + fileName + ".csv";
				file = new File(path);
				if (file.exists()) {
					file.delete();
				}
				cusIdPathMap.put(entry.getKey(), path);
				cusIdSbMap.put(entry.getKey(), new StringBuilder(50000));
				StringBuilder bw = new StringBuilder();
				for (String string : ((entry.getKey() == 0) ? inside_hearders : hearders)) {
					bw.append(string).append(",");
				}
				bw.append("\r");
				CSVUtils.appendCsv(path, bw.toString());
			}
			if (i == 0)
				UploadCSV4MonthScheduleServiceImpl.getCustomerMoneyRecordDataList(cusStartDate, cusEndDate, fieldsList, cusIdPathMap, cusIdSbMap,
						customerMoneyRecordService, customerInfoService);
			else if (i == 1) {
				UploadCSV4MonthScheduleServiceImpl.getOrderInfoDataList(cusStartDate, cusEndDate, fieldsList, cusIdPathMap, cusIdSbMap,
						orderInfoService, productCategoryInfoService);
			}

		}
	}
	
	public static Map<Date, String> getTimeUrlMap(String filePathHead, String filePathEnd, Date endTime, Date startTime) {
		Date startDay = startTime;
		Map<Date, String> timeMap = new HashMap<>();
		while (startDay.before(endTime)) {
			String fileName = filePathHead + DateUtils.formatDate(startDay) + filePathEnd;
			if (new File(fileName).isFile()) {
				timeMap.put(startDay, fileName);
			}
			startDay = DateUtils.addDays(startDay, 1);
		}
		return timeMap;
	}
	
	/**
	 * 将中转平台需要的统计信息存成map
	 * 
	 * @param result
	 * @param map
	 */
	public static Map getCountMap(TransferOrderService tfoService, List<PropertyFilter> filters, String tableName) throws Exception {
		Map<String, Object> returnMap = new HashMap<String, Object>();
		String ORDER_STATUS = "status";
		
		BaseUtil.testSearch(filters, "receiveTime");
		StringBuffer sql = new StringBuffer(200);
		
		sql.append("select sum((UNIX_TIMESTAMP(endTime) - UNIX_TIMESTAMP(startTime)))/count(" + ORDER_STATUS
				+ ") as successTime,count("+ ORDER_STATUS + ") as stateNum," + ORDER_STATUS + " as state from " + tableName);
		// sql.append("select sum(dealTime) as useTime,count(chargeState) as stateNum,chargeState as state,sum(sprice) as cost,sum(unitPrice) as price,sum(divideMoney) as divideMoney  from tmall_order");

		StringBuffer whereSql = new StringBuffer(100);
		for (int i = 0, len = filters.size(); i < len; i++) {
			Class<?> cls = filters.get(i).getPropertyClass();
			MatchType matchType = filters.get(i).getMatchType();
			String bijiao = "";
			List<Object> matchValueList = filters.get(i).getMatchValue();
			if (matchValueList.size() > 0) {
				String matchValue = matchValueList.get(0).toString();
				Class<? extends Object> cls1 = matchValueList.get(0).getClass();
				if (cls1.equals(String.class) || cls1.equals(Date.class)) {
					if (cls1.equals(Date.class)) {
						log.info(new Date(matchValue).toString());
						SimpleDateFormat sdf1 = new SimpleDateFormat("EEE MMM dd HH:mm:ss Z yyyy", Locale.UK);
						matchValue = DateUtils.formatDate(sdf1.parse(matchValue), "yyyy-MM-dd HH:mm:ss");
					}
					matchValue = "'" + matchValue + "'";
					log.info(matchValue);
				}
				switch (matchType) {
				case EQ:
					bijiao = "=" + matchValue;
					break;
				case LIKE:
					bijiao = "like(%" + matchValue + "%)";
					break;
				case LT:
					bijiao = "<" + matchValue;
					break;
				case GT:
					bijiao = ">" + matchValue;
					break;
				case GE:
					bijiao = ">=" + matchValue;
					break;
				case LE:
					bijiao = "<=" + matchValue;
					break;
				case IN:
					String str = "";
					if (matchValueList.size() > 0) {
						for (Object object : matchValueList) {
							if (object.getClass().equals(String.class) || object.getClass().equals(Date.class))
								str += "'" + object.toString() + "',";
							else {
								str += object.toString() + ",";
							}
						}
						str = str.substring(0, str.length() - 1);
					}
					bijiao = " in (" + str + ")";
					break;
				default:
					break;
				}
			}
			if (i == 0) {
				whereSql.append(" where ");
			} else
				whereSql.append(" and ");
			String propertyName = filters.get(i).getPropertyName();
			if ("successId".equals(propertyName)) {
				propertyName = "providerId";
			}
			whereSql.append(propertyName + bijiao);
		}
		sql.append(whereSql.toString()).append(" GROUP BY " + ORDER_STATUS + "");
		LoggerFactory.getLogger("countSql:").info(sql.toString());
		List<Map<String, Object>> query = tfoService.query(sql.toString().replaceAll("beyoudOperation", "operator"));
		if (query.size() == 0){
			returnMap.put("failReason","数据不能为空");
			return null;
		}
		Double successTime = 0d;
		Double failTime = 0d;
		Integer totalNum = 0;
		Integer successNum = 0;
		Integer failNum = 0;
		Integer waitNum = 0;
		Integer handleNum = 0;
		Integer exceptNum = 0;

		for (Map<String, Object> map : query) {
			Double decimalSuccessTime = map.get("successTime") != null ? Double.valueOf(map.get("successTime").toString()) : 0d;
			Integer state = (Integer) map.get("state");
			Integer stateNum = (BigInteger) map.get("stateNum") != null ? ((BigInteger) map.get("stateNum")).intValue() : 0;
			BigDecimal decimalCost = (BigDecimal) map.get("cost");
			BigDecimal decimalPrice = (BigDecimal) map.get("price");
			Double cost = decimalCost != null ? decimalCost.doubleValue() : 0;
			Double price = decimalPrice != null ? decimalPrice.doubleValue() : 0;
			state = state != null ? state : 0;
			totalNum += stateNum;
			switch (state) {
			case 0:
				exceptNum += stateNum;
				break;
			case 1:
				successTime += decimalSuccessTime;
				successNum += stateNum;
				break;
			case 2:
				failTime += decimalSuccessTime;
				failNum += stateNum;
				break;
			case 3:
				waitNum += stateNum;
				break;
			default:
				break;
			}
		}
		returnMap.put("successTime", successTime);
		returnMap.put("successNum", successNum);
		returnMap.put("failTime", failTime);
		returnMap.put("failNum", failNum);
		returnMap.put("waitNum", waitNum);
		returnMap.put("exceptNum", exceptNum);
		returnMap.put("totalNum", totalNum);
		return returnMap;
	}
}

package xinxing.boss.admin.boss.other.domain;import java.io.Serializable;import java.util.Date;import java.util.Map;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;import org.hibernate.annotations.DynamicInsert;import org.hibernate.annotations.DynamicUpdate;import xinxing.boss.admin.common._enum.FreeName;import xinxing.boss.admin.common.utils.string.StringUtils;import xinxing.boss.admin.common.utils.time.DateUtils;/** * 天猫订单缓存表; *  */@Entity@Table(name = "boss_tmall_cache")@DynamicInsert@DynamicUpdatepublic class BossTmallCache extends BaseDomain implements Serializable {	private static final long serialVersionUID = 1L;	private Integer id;// 编号	@FreeName(value = "供应商id", mapName = "")	private Integer providerId;// 供应商id	@FreeName(value = "产品id", mapName = "")	private Integer categoryId;// 产品id	@FreeName(value = "订单id逗号隔开", mapName = "")	private String orderIds;// 订单id逗号隔开	@FreeName(value = "计时时间", mapName = "")	private Date beginTime;// 计时时间	@FreeName(value = "是否缓存", mapName = "")	private Integer isCache;// 是否缓存	@FreeName(value = "备注", mapName = "")	private String remark;// 备注	@Id	@GeneratedValue(strategy = GenerationType.IDENTITY)	@Column(name = "id", unique = true, nullable = false)	public Integer getId() {		return id;	}	public void setId(Integer id) {		this.id = id;	}	@Column(name = "providerid", unique = true, nullable = false)	public Integer getProviderId() {		return providerId;	}	public void setProviderId(Integer providerId) {		this.providerId = providerId;	}	@Column(name = "categoryid", unique = true, nullable = false)	public Integer getCategoryId() {		return categoryId;	}	public void setCategoryId(Integer categoryId) {		this.categoryId = categoryId;	}	@Column(name = "orderids", unique = true, nullable = false)	public String getOrderIds() {		return orderIds;	}	public void setOrderIds(String orderIds) {		this.orderIds = orderIds;	}	@Column(name = "begintime", unique = true, nullable = false)	public Date getBeginTime() {		return beginTime;	}	public void setBeginTime(Date beginTime) {		this.beginTime = beginTime;	}	@Column(name = "iscache", unique = true, nullable = false)	public Integer getIsCache() {		return isCache;	}	public void setIsCache(Integer isCache) {		this.isCache = isCache;	}	@Column(name = "remark", unique = true, nullable = false)	public String getRemark() {		return remark;	}	public void setRemark(String remark) {		this.remark = remark;	}	public BossTmallCache() {	}	public BossTmallCache(Integer providerId, Integer categoryId, String orderIds, Date beginTime, Integer isCache) {		this.providerId = providerId;		this.categoryId = categoryId;		this.orderIds = orderIds;		this.beginTime = beginTime;		this.isCache = isCache;		// this.remark = remark;	}	public boolean valueEquals(Map<String, Object> _old) {		Boolean isEqual = false;		System.out.println("----------------------------");		if (				((this.beginTime.getTime() + "").equals(_old.get("beginTime").toString())||StringUtils.isBlank(orderIds))				&&//				 this.categoryId.toString().equals(_old.get("categoryId").toString())//				&& this.providerId.toString().equals(_old.get("providerId").toString())//				&& this.orderIds.toString().equals(_old.get("orderIds").toString())//				&& this.isCache.toString().equals(_old.get("isCache").toString())//		) {			isEqual = true;		}		return isEqual;	}}